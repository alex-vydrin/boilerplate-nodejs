---
description:
globs: **/*.ts
alwaysApply: false
---

# TypeScript Best Practices

## Type System

- Prefer interfaces over types for object definitions
- Use type for unions, intersections, and mapped types
- Avoid `any` (and `as any`) wherever possible.  
  If unavoidable—for example, when interfacing with untyped third-party code—  
  isolate the usage and add a clear comment/TODO to replace it with proper typings.
- Use strict TypeScript configuration
- Leverage TypeScript's built-in utility types
- Use generics for reusable type patterns

## Naming Conventions

- Use PascalCase for type names and interfaces
- Use camelCase for variables and functions
- Use UPPER_CASE for constants
- Use descriptive names with auxiliary verbs (e.g., isLoading, hasError)

## Code Organization

- Keep type definitions close to where they're used
- Export types and interfaces from dedicated type files when shared
- Use barrel exports (index.ts) for organizing exports
- Place shared types in a `types.ts` file
- Co-locate component props with their components

## Functions

- Always specify explicit return types for all public functions.
- Use arrow functions for callbacks and methods to maintain consistent context (this binding).
- Implement robust error handling using custom error types where applicable.
- Use function overloads to handle complex type scenarios cleanly.
- Prefer async/await over raw Promise chains for better readability and error handling.
- Prefer function declarations over function expressions for top-level or named logic.
- Favor functional programming patterns over class-based designs where practical.

## Best Practices

- Enable strict mode in tsconfig.json
- Use readonly for immutable properties
- Leverage discriminated unions for type safety
- Use type guards for runtime type checking
- Implement proper null checking
- Avoid type assertions unless necessary

## Error Handling

- Avoid blanket try/catch blocks that merely swallow errors;  
   let errors propagate unless the caller can take meaningful action.
- Handle Promise rejections properly
